" Ctags {
    set tags=./tags;/,~/.vimtags

    " Make tags placed in .git/tags file available in all levels of a repository
    let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
    if gitroot != ''
        let &tags = &tags . ',' . gitroot . '/.git/tags'
    endif
" }



" SnipMate {
    " Setting the author var
    " If forking, please overwrite in your .vimrc.local file
    let g:snips_author = 'Syi <syi@cs.wm.edu>'
" }


" Debugging with VimDebugger {
    map <F11> :DbgStepInto<CR>
    map <F10> :DbgStepOver<CR>
    map <S-F11> :DbgStepOut<CR>
    map <F5> :DbgRun<CR>
    map <F6> :DbgDetach<CR>
    map <F8> :DbgToggleBreakpoint<CR>
    map <S-F8> :DbgFlushBreakpoints<CR>
    map <F9> :DbgRefreshWatch<CR>
    map <S-F9> :DbgAddWatch<CR>
" }

" Vimwiki {
    if WINDOWS()
        let g:vimwikihome = 'E:\Github\'
    elseif LINUX()
        " default set in the department machine scratch
        let g:vimwikihome = '/scratch/syi.scratch/GitRepo/'
        if g:hostname == "alienbuntu"
            let g:vimwikihome = '/home/syi/GitRepo/'
        endif
        if g:hostname == "syi-samsung"
            let g:vimwikihome = '/home/syi/GitRepo/'
        endif
    elseif OSX()
        let g:vimwikihome = '/Users/syi/'
    endif   

    let g:vimwiki_list = [{'path': g:vimwikihome.'yishanhe.github.com/_vimwiki/',
        \ 'path_html': g:vimwikihome.'yishanhe.github.com/wiki/',
        \ 'template_path': g:vimwikihome.'yishanhe.github.com/assets/vimwiki_include/template/',
        \ 'index': 'index',
        \ 'ext': '.wiki',
        \ 'syntax': 'default',
        \ 'auto_export': 1,
        \ 'nested_syntaxes': {'python': 'python', 'cpp': 'cpp', 'c': 'c', 'java': 'java'},
        \ 'template_ext': '.html'}]

    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_camel_case = 0
    let g:vimwiki_valid_html_tags='strong,em,del,blockquote,ins,code'
    let g:vimwiki_browsers = ['google-chrome']
    " todo toggler
    map <leader>tl <Plug>VimwikiToggleListItem  
" }



" PyMode {
    " Disable if python support not present
    if !has('python')
        let g:pymode = 0
    endif

    let g:pymode_lint_checkers = ['pyflakes']
    let g:pymode_trim_whitespaces = 0
    let g:pymode_options = 0
    let g:pymode_rope = 0
" }

" ctrlp {
    let g:ctrlp_working_path_mode = 'ra'
    nnoremap <silent> <D-t> :CtrlP<CR>
    nnoremap <silent> <D-r> :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\.git$\|\.hg$\|\.svn$',
        \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

    " On Windows use "dir" as fallback command.
    if WINDOWS()
        let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
    elseif executable('ag')
        let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    elseif executable('ack-grep')
        let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
    elseif executable('ack')
        let s:ctrlp_fallback = 'ack %s --nocolor -f'
    else
        let s:ctrlp_fallback = 'find %s -type f'
    endif
    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ 'fallback': s:ctrlp_fallback
    \ }

    " CtrlP extensions
    let g:ctrlp_extensions = ['funky']

    "funky
    nnoremap <Leader>fu :CtrlPFunky<Cr>
"}

" TagBar {
    nnoremap <silent> <leader>tt :TagbarToggle<CR>

    " If using go please install the gotags program using the following
    " go install github.com/jstemmer/gotags
    " And make sure gotags is in your path
    let g:tagbar_type_go = {
        \ 'ctagstype' : 'go',
        \ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',
            \ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
            \ 'r:constructor', 'f:functions' ],
        \ 'sro' : '.',
        \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
        \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
        \ 'ctagsbin'  : 'gotags',
        \ 'ctagsargs' : '-sort -silent'
        \ }
"}


" Fugitive {
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>gr :Gread<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    " Mnemonic _i_nteractive
    nnoremap <silent> <leader>gi :Git add -p %<CR>
    nnoremap <silent> <leader>gg :SignifyToggle<CR>
"}
